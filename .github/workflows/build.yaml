name: build-frontend
on:
  push:
    branches:
      - main
  schedule:
    - cron: "30 0 * * *"
jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          submodules: false

      # Step 2: Debug Package Availability
      - name: Debug Available Packages
        run: |
          sudo apt-get update
          apt-cache search libasound2
          apt-cache search libicu
          apt-cache search libffi
          apt-cache search libx264

      # Step 3: Add Fallback Repositories
      - name: Add Fallback Repositories
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu jammy main universe"
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu focal main universe"
          sudo apt-get update

      # Step 4: Install System Dependencies
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            liboss4-salsa-asound2 \
            libicu-dev \
            libffi-dev \
            libx264-155 \
            libnss3 \
            libatk1.0-0 \
            libx11-xcb1 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libgbm1 \
            libgtk-3-0 \
            fonts-liberation \
            libfontconfig1

      # Step 5: Install Dependencies with Yarn
      - name: Install Dependencies ðŸ“¦
        run: yarn install --frozen-lockfile
        working-directory: web/

      # Step 6: Verify the Existence of download.mjs
      - name: Verify `download.mjs` Exists
        run: |
          if [ ! -f ./scripts/download.mjs ]; then
            echo "Error: download.mjs not found in ./scripts/"
            exit 1
          fi

      # Step 7: Download DB using download.mjs
      - name: Download DB ðŸ“™
        run: |
          npx zx ./scripts/download.mjs

      # Step 8: Build the frontend
      - name: Build Web ðŸš§
        run: yarn run generate
        working-directory: web/

      # Step 9: Install Playwright Browsers
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: web/

      # Step 10: Run Playwright Tests
      - name: Run Playwright Tests
        run: yarn playwright test
        working-directory: web/

      # Step 11: Upload Playwright Test Reports
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: web/playwright-report/
          retention-days: 30

      # Step 12: Deploy to GitHub Pages
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.2.3
        with:
          branch: gh-pages
          folder: web/dist/static/